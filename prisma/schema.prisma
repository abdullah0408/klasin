generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId String  @id
  email   String  @unique
  name    String?
  image   String?

  role    String  @default("user")

  courses          Course[]           @relation("UserCourses")
  courseViews      CourseView[]
  MaterialView     MaterialView[]
  bookmarkedMaterial BookmarkedMaterial[]
  readMaterial ReadMaterial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id    String @id @default(cuid())
  title String
  code  String @unique

  users       User[]         @relation("UserCourses")
  courseViews CourseView[]
  materials   Material[]
  groups      ContantGroup[]
  type String @default("Course")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseView {
  id       String   @id @default(cuid())
  userId   String
  courseId String
  viewedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [clerkId])
  course Course @relation(fields: [courseId], references: [id])
}

model Material {
  id          String       @id @default(cuid())
  title       String
  description String?
  content     String?
  fileUrl     String
  type        MaterialType @default(File)

  courseId String
  groupId  String?

  course       Course             @relation(fields: [courseId], references: [id])
  group        ContantGroup?      @relation(fields: [groupId], references: [id])
  MaterialView MaterialView[]
  bookmarked     BookmarkedMaterial[]
  ReadMaterial ReadMaterial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MaterialView {
  id         String   @id @default(cuid())
  userId     String
  materialId String
  viewedAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [clerkId])
  material Material @relation(fields: [materialId], references: [id])
}

model BookmarkedMaterial {
  userId     String
  materialId String

  user     User     @relation(fields: [userId], references: [clerkId])
  material Material @relation(fields: [materialId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, materialId])
}

model ReadMaterial {
  userId     String
  materialId String

  user     User     @relation(fields: [userId], references: [clerkId])
  material Material @relation(fields: [materialId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, materialId])
}

model ContantGroup {
  id          String  @id @default(cuid())
  title       String
  description String?

  courseId      String
  parentGroupId String?
  type          String @default("Folder")

  course      Course         @relation(fields: [courseId], references: [id])
  parentGroup ContantGroup?  @relation("SubGroups", fields: [parentGroupId], references: [id])
  subGroups   ContantGroup[] @relation("SubGroups")

  materials Material[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MaterialType {
  File
  Zip
}